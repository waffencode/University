// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using University.Infrastructure;

#nullable disable

namespace University.Migrations
{
    [DbContext(typeof(UniversityContext))]
    [Migration("20250427135449_DomainExtension2")]
    partial class DomainExtension2
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("MessageStudyGroup", b =>
                {
                    b.Property<Guid>("MessageId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ReceiversStudyGroupsId")
                        .HasColumnType("uuid");

                    b.HasKey("MessageId", "ReceiversStudyGroupsId");

                    b.HasIndex("ReceiversStudyGroupsId");

                    b.ToTable("MessageStudyGroup");
                });

            modelBuilder.Entity("MessageUser", b =>
                {
                    b.Property<Guid>("MessageId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ReceiversId")
                        .HasColumnType("uuid");

                    b.HasKey("MessageId", "ReceiversId");

                    b.HasIndex("ReceiversId");

                    b.ToTable("MessageUser");
                });

            modelBuilder.Entity("ScheduleClassStudyGroup", b =>
                {
                    b.Property<Guid>("GroupsId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ScheduleClassId")
                        .HasColumnType("uuid");

                    b.HasKey("GroupsId", "ScheduleClassId");

                    b.HasIndex("ScheduleClassId");

                    b.ToTable("ScheduleClassStudyGroup");
                });

            modelBuilder.Entity("University.Domain.ClassTimeSlot", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<TimeOnly>("EndTime")
                        .HasColumnType("time without time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Ordinal")
                        .HasColumnType("integer");

                    b.Property<TimeOnly>("StartTime")
                        .HasColumnType("time without time zone");

                    b.HasKey("Id");

                    b.ToTable("ClassTimeSlots");
                });

            modelBuilder.Entity("University.Domain.Classroom", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Designation")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Classrooms");
                });

            modelBuilder.Entity("University.Domain.FieldOfStudy", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("FormOfStudy")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Specialization")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("FieldsOfStudy");
                });

            modelBuilder.Entity("University.Domain.Message", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.PrimitiveCollection<string[]>("Attachments")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsImportant")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("RelatedClassId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SenderId")
                        .HasColumnType("uuid");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Topic")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RelatedClassId");

                    b.HasIndex("SenderId");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("University.Domain.RegistrationRequest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("CurrentRole")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("RequestedRole")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("RegistrationRequests");
                });

            modelBuilder.Entity("University.Domain.ScheduleClass", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("ClassType")
                        .HasColumnType("integer");

                    b.Property<Guid>("ClassroomId")
                        .HasColumnType("uuid");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("SubjectWorkProgramId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TeacherId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TimeSlotId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ClassroomId");

                    b.HasIndex("SubjectWorkProgramId");

                    b.HasIndex("TeacherId");

                    b.HasIndex("TimeSlotId");

                    b.ToTable("ScheduleClasses");
                });

            modelBuilder.Entity("University.Domain.StudyGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("FieldOfStudyId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("FieldOfStudyId");

                    b.ToTable("StudyGroups");
                });

            modelBuilder.Entity("University.Domain.Subject", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Subjects");
                });

            modelBuilder.Entity("University.Domain.SubjectWorkProgram", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("SubjectId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("SubjectId");

                    b.ToTable("SubjectWorkPrograms");
                });

            modelBuilder.Entity("University.Domain.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AvatarUri")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(254)
                        .HasColumnType("character varying(254)");

                    b.Property<string>("FullName")
                        .HasColumnType("text");

                    b.Property<string>("PasswordHash")
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<int>("Role")
                        .HasColumnType("integer");

                    b.Property<Guid?>("StudyGroupId")
                        .HasColumnType("uuid");

                    b.Property<string>("Username")
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.HasKey("Id");

                    b.HasIndex("StudyGroupId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("MessageStudyGroup", b =>
                {
                    b.HasOne("University.Domain.Message", null)
                        .WithMany()
                        .HasForeignKey("MessageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("University.Domain.StudyGroup", null)
                        .WithMany()
                        .HasForeignKey("ReceiversStudyGroupsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MessageUser", b =>
                {
                    b.HasOne("University.Domain.Message", null)
                        .WithMany()
                        .HasForeignKey("MessageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("University.Domain.User", null)
                        .WithMany()
                        .HasForeignKey("ReceiversId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ScheduleClassStudyGroup", b =>
                {
                    b.HasOne("University.Domain.StudyGroup", null)
                        .WithMany()
                        .HasForeignKey("GroupsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("University.Domain.ScheduleClass", null)
                        .WithMany()
                        .HasForeignKey("ScheduleClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("University.Domain.Message", b =>
                {
                    b.HasOne("University.Domain.ScheduleClass", "RelatedClass")
                        .WithMany()
                        .HasForeignKey("RelatedClassId");

                    b.HasOne("University.Domain.User", "Sender")
                        .WithMany()
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RelatedClass");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("University.Domain.RegistrationRequest", b =>
                {
                    b.HasOne("University.Domain.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("University.Domain.ScheduleClass", b =>
                {
                    b.HasOne("University.Domain.Classroom", "Classroom")
                        .WithMany()
                        .HasForeignKey("ClassroomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("University.Domain.SubjectWorkProgram", "SubjectWorkProgram")
                        .WithMany()
                        .HasForeignKey("SubjectWorkProgramId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("University.Domain.User", "Teacher")
                        .WithMany()
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("University.Domain.ClassTimeSlot", "TimeSlot")
                        .WithMany()
                        .HasForeignKey("TimeSlotId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("University.Domain.Model.ScheduleClassDetails", "Details", b1 =>
                        {
                            b1.Property<Guid>("ScheduleClassId")
                                .HasColumnType("uuid");

                            b1.Property<Guid>("Id")
                                .HasColumnType("uuid");

                            b1.HasKey("ScheduleClassId");

                            b1.ToTable("ScheduleClasses");

                            b1.WithOwner()
                                .HasForeignKey("ScheduleClassId");

                            b1.OwnsMany("University.Domain.Model.StudentDetails", "StudentDetailsList", b2 =>
                                {
                                    b2.Property<Guid>("ScheduleClassDetailsScheduleClassId")
                                        .HasColumnType("uuid");

                                    b2.Property<Guid>("Id")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("uuid");

                                    b2.Property<int>("Attendance")
                                        .HasColumnType("integer");

                                    b2.Property<int>("Grade")
                                        .HasColumnType("integer");

                                    b2.Property<Guid>("StudentId")
                                        .HasColumnType("uuid");

                                    b2.HasKey("ScheduleClassDetailsScheduleClassId", "Id");

                                    b2.HasIndex("StudentId");

                                    b2.ToTable("StudentDetails");

                                    b2.WithOwner()
                                        .HasForeignKey("ScheduleClassDetailsScheduleClassId");

                                    b2.HasOne("University.Domain.User", "Student")
                                        .WithMany()
                                        .HasForeignKey("StudentId")
                                        .OnDelete(DeleteBehavior.Cascade)
                                        .IsRequired();

                                    b2.Navigation("Student");
                                });

                            b1.Navigation("StudentDetailsList");
                        });

                    b.Navigation("Classroom");

                    b.Navigation("Details")
                        .IsRequired();

                    b.Navigation("SubjectWorkProgram");

                    b.Navigation("Teacher");

                    b.Navigation("TimeSlot");
                });

            modelBuilder.Entity("University.Domain.StudyGroup", b =>
                {
                    b.HasOne("University.Domain.FieldOfStudy", "FieldOfStudy")
                        .WithMany()
                        .HasForeignKey("FieldOfStudyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FieldOfStudy");
                });

            modelBuilder.Entity("University.Domain.SubjectWorkProgram", b =>
                {
                    b.HasOne("University.Domain.Subject", "Subject")
                        .WithMany()
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsMany("University.Domain.PlannedClass", "Classes", b1 =>
                        {
                            b1.Property<Guid>("SubjectWorkProgramId")
                                .HasColumnType("uuid");

                            b1.Property<Guid>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uuid");

                            b1.Property<int>("ClassType")
                                .HasColumnType("integer");

                            b1.Property<int>("Hours")
                                .HasColumnType("integer");

                            b1.Property<string>("Theme")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.HasKey("SubjectWorkProgramId", "Id");

                            b1.ToTable("PlannedClass");

                            b1.WithOwner()
                                .HasForeignKey("SubjectWorkProgramId");
                        });

                    b.Navigation("Classes");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("University.Domain.User", b =>
                {
                    b.HasOne("University.Domain.StudyGroup", null)
                        .WithMany("Students")
                        .HasForeignKey("StudyGroupId");
                });

            modelBuilder.Entity("University.Domain.StudyGroup", b =>
                {
                    b.Navigation("Students");
                });
#pragma warning restore 612, 618
        }
    }
}
